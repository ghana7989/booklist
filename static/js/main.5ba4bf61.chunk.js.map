{"version":3,"sources":["contexts/BookContext.js","components/Navbar.js","components/Bookdetail.js","components/Booklist.js","components/Bookform.js","App.js","serviceWorker.js","index.js"],"names":["BookContext","createContext","BookContextProvider","props","useState","title","author","id","books","setBooks","Provider","value","addBook","v4","removeBook","filter","book","children","Navbar","useContext","className","length","BookDetails","key","onClick","BookList","map","NewBookForm","setTitle","setAuthor","onSubmit","e","preventDefault","type","placeholder","onChange","target","required","autoComplete","autoCapitalize","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"kMAGaA,EAAcC,0BAmBZC,EAjBa,SAACC,GAAW,IAAD,EACTC,mBAAS,CAC/B,CAAEC,MAAO,mBAAoBC,OAAQ,mBAAoBC,GAAI,GAC7D,CAAEF,MAAO,mBAAoBC,OAAQ,oBAAqBC,GAAI,KAH/B,mBAC5BC,EAD4B,KACrBC,EADqB,KAWnC,OACI,kBAACT,EAAYU,SAAb,CAAsBC,MAAO,CAAEC,QAPnB,SAACP,EAAOC,GACpBG,EAAS,GAAD,mBAAKD,GAAL,CAAY,CAAEH,QAAOC,SAAQC,GAAIM,sBAMDL,QAAOM,WAJhC,SAACP,GAChBE,EAASD,EAAMO,QAAO,SAAAC,GAAI,OAAIA,EAAKT,KAAOA,SAIrCJ,EAAMc,WCLJC,EAVA,WAAO,IACVV,EAAUW,qBAAWnB,GAArBQ,MACR,OACI,yBAAKY,UAAU,UACX,kDACA,iDAAuBZ,EAAMa,OAA7B,cCUGC,EAfK,SAAC,GAAmB,IAAjBN,EAAgB,EAAhBA,KACXF,GAD2B,EAAVS,IACFJ,qBAAWnB,GAA1Bc,YACR,OACI,wBAAIU,QAAS,kBAAMV,EAAWE,EAAKT,MAC/B,yBAAKa,UAAU,SACVJ,EAAKX,OAEV,yBAAKe,UAAU,UACVJ,EAAKV,UCaPmB,EApBE,WAAO,IACZjB,EAAUW,qBAAWnB,GAArBQ,MAER,OAAOA,EAAMa,OAEL,yBAAKD,UAAU,aACX,4BAEQZ,EAAMkB,KAAI,SAAAV,GACN,OAAQ,kBAAC,EAAD,CAAaA,KAAMA,EAAMO,IAAKP,EAAKT,UAQ3D,yBAAKa,UAAU,SAAf,+BCKGO,EAvBK,WAAO,IACff,EAAYO,qBAAWnB,GAAvBY,QADc,EAEIR,mBAAS,IAFb,mBAEfC,EAFe,KAERuB,EAFQ,OAGMxB,mBAAS,IAHf,mBAGfE,EAHe,KAGPuB,EAHO,KAUtB,OACI,0BAAMC,SAPU,SAACC,GACjBA,EAAEC,iBACFpB,EAAQP,EAAOC,GACfuB,EAAU,IACVD,EAAS,MAIL,2BAAOK,KAAK,OAAOC,YAAY,aAAavB,MAAON,EAC/C8B,SAAU,SAACJ,GAAD,OAAOH,EAASG,EAAEK,OAAOzB,QAAQ0B,UAAQ,EAACC,aAAa,MAAMC,eAAe,OAE1F,2BAAON,KAAK,OAAOC,YAAY,cAAcvB,MAAOL,EAChD6B,SAAU,SAACJ,GAAD,OAAOF,EAAUE,EAAEK,OAAOzB,QAAQ0B,UAAQ,EAACC,aAAa,QAEtE,2BAAOL,KAAK,SAAStB,MAAM,eCLxB6B,MAVf,WACE,OACE,kBAAC,EAAD,KACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,QCCcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,a","file":"static/js/main.5ba4bf61.chunk.js","sourcesContent":["import React, { createContext, useState } from 'react';\r\nimport { uuid as v4 } from 'uuidv4';\r\n\r\nexport const BookContext = createContext()\r\n\r\nconst BookContextProvider = (props) => {\r\n    const [books, setBooks] = useState([\r\n        { title: 'name of the wind', author: 'patrick rothfuss', id: 1 },\r\n        { title: 'the final empire', author: 'brandon sanderson', id: 2 }\r\n    ])\r\n    const addBook = (title, author) => {\r\n        setBooks([...books, { title, author, id: v4() }])\r\n    }\r\n    const removeBook = (id) => {\r\n        setBooks(books.filter(book => book.id !== id))\r\n    }\r\n    return (\r\n        <BookContext.Provider value={{ addBook, books, removeBook }}>\r\n            {props.children}\r\n        </BookContext.Provider>\r\n    )\r\n}\r\nexport default BookContextProvider","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst Navbar = () => {\r\n    const { books } = useContext(BookContext)\r\n    return ( \r\n        <div className=\"navbar\">\r\n            <h1>Ninja Reading list</h1>\r\n            <p>Currently You have {books.length} to read</p>\r\n        </div>\r\n     );\r\n}\r\n\r\nexport default Navbar;","import React, { useContext } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst BookDetails = ({ book, key }) => {\r\n    const { removeBook } = useContext(BookContext)\r\n    return (\r\n        <li onClick={() => removeBook(book.id)}>\r\n            <div className=\"title\">\r\n                {book.title}\r\n            </div>\r\n            <div className=\"author\">\r\n                {book.author}\r\n            </div>\r\n\r\n        </li>\r\n    );\r\n}\r\n\r\nexport default BookDetails;","import React, { useState, useEffect, useContext } from 'react'\r\nimport { BookContext } from '../contexts/BookContext';\r\nimport BookDetails from './Bookdetail';\r\n\r\nconst BookList = () => {\r\n    const { books } = useContext(BookContext)\r\n\r\n    return books.length ?\r\n        (\r\n            <div className=\"book-list\">\r\n                <ul>\r\n                    {\r\n                        books.map(book => {\r\n                            return (<BookDetails book={book} key={book.id} />)\r\n                        })\r\n                    }\r\n                </ul>\r\n            </div>\r\n        )\r\n        :\r\n        (\r\n            <div className=\"empty\">No books to Read. Add Some</div>\r\n        )\r\n}\r\nexport default BookList;\r\n","import React, { useContext, useState } from 'react';\r\nimport { BookContext } from '../contexts/BookContext';\r\n\r\nconst NewBookForm = () => {\r\n    const { addBook } = useContext(BookContext)\r\n    const [title, setTitle] = useState(\"\")\r\n    const [author, setAuthor] = useState(\"\")\r\n    const handleSubit = (e) => {\r\n        e.preventDefault()\r\n        addBook(title, author)\r\n        setAuthor(\"\")\r\n        setTitle(\"\")\r\n    }\r\n    return (\r\n        <form onSubmit={handleSubit}>\r\n            <input type=\"text\" placeholder=\"Book Title\" value={title}\r\n                onChange={(e) => setTitle(e.target.value)} required autoComplete=\"off\" autoCapitalize=\"on\"\r\n            />\r\n            <input type=\"text\" placeholder=\"Author Name\" value={author}\r\n                onChange={(e) => setAuthor(e.target.value)} required autoComplete=\"off\"\r\n            />\r\n            <input type=\"submit\" value=\"Add Book\" />\r\n        </form>\r\n    );\r\n}\r\n\r\nexport default NewBookForm;\r\n","import React from 'react';\nimport BookContextProvider from './contexts/BookContext';\nimport Navbar from './components/Navbar';\nimport BookList from './components/Booklist';\nimport NewBookForm from './components/Bookform';\n\nfunction App() {\n  return (\n    <BookContextProvider>\n      <Navbar />\n      <BookList />\n      <NewBookForm/>\n    </BookContextProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}